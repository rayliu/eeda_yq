package controllers.eeda;import java.io.BufferedReader;import java.io.File;import java.io.IOException;import java.io.InputStreamReader;import java.io.LineNumberReader;import java.lang.management.ManagementFactory;import java.math.BigDecimal;import com.jfinal.core.Controller;import com.jfinal.log.Log;import com.sun.management.OperatingSystemMXBean;public class SysInfoController extends Controller {    private static Log logger = Log.getLog(SysInfoController.class);    private static final int CPUTIME = 500;    private static final int PERCENT = 100;    private static final int FAULTLENGTH = 10;    public static void main(String[] args) throws IOException {        // logger.debug(String.valueOf(getLinuxCpuUsage()));        // logger.debug(getMem());        // System.out.println(getDisk());            }        public void getLinuxCpuUsage() throws IOException {        double cpuUsed = 0;        Runtime rt = Runtime.getRuntime();        Process p = rt.exec("top -b -n 1");// 调用系统的“top"命令        BufferedReader in = null;        try {            in = new BufferedReader(new InputStreamReader(p.getInputStream()));            String str = null;            String[] strArray = null;            while ((str = in.readLine()) != null) {                int m = 0;                if (str.indexOf("Cpu(s): ") != -1) {// 只分析正在运行的进程，top进程本身除外 &&                    //System.out.println(str);                    strArray = str.split(" ");                    for (String tmp : strArray) {                        if (tmp.trim().length() == 0)                            continue;                        //Cpu(s):  2.0%us,  0.4%sy,  0.0%ni, 97.1%id,  0.5%wa,  0.0%hi,  0.0%si,  0.0%st                        if (++m == 2) {// 第2列为cpu的使用百分比(RedHat                            tmp=tmp.replaceAll("%us,", "");                            cpuUsed += Double.parseDouble(tmp);                        }                    }                }            }        } catch (Exception e) {            e.printStackTrace();        } finally {            in.close();        }        renderText(String.valueOf(cpuUsed));    }    // 获取内存使用率    public void getMem() throws Exception {        double memTotal = 0;        double memUsed = 0;        Runtime rt = Runtime.getRuntime();        Process p = rt.exec("top -b -n 1");// 调用系统的“top"命令        BufferedReader in = null;        try {            in = new BufferedReader(new InputStreamReader(p.getInputStream()));            String str = null;            String[] strArray = null;            while ((str = in.readLine()) != null) {                int m = 0;                if (str.indexOf("Mem: ") != -1) {// 只分析正在运行的进程，top进程本身除外 &&                    //                    //System.out.println(str);                    strArray = str.split(" ");                    for (String tmp : strArray) {                        //System.out.println(tmp);                        if (tmp.trim().length() == 0)                            continue;                        //Mem:   1921100k total,  1394564k used,   526536k free,    41688k buffers                        ++m;                        if (m == 2) {                            // 9)--第2列为mem total                            tmp=tmp.replaceAll("k", "");                            memTotal += Double.parseDouble(tmp);                        }                        if (m == 4) {                            // 9)--第4列为mem的使用                            tmp=tmp.replaceAll("k", "");                            memUsed += Double.parseDouble(tmp);                        }                    }                }            }        } catch (Exception e) {            e.printStackTrace();        } finally {            in.close();        }         BigDecimal b = new BigDecimal((memUsed/memTotal)*100);         double mem = b.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue();        renderText(String.valueOf(mem));        // return compare.toString();    }    // 获取文件系统使用率    public void getDisk() throws IOException {        double totalhd = 0;        double usedhd = 0;        Runtime rt = Runtime.getRuntime();        Process p = rt.exec("df -hl /home");// df -hl 查看硬盘空间        BufferedReader in = null;        try {            in = new BufferedReader(new InputStreamReader(p.getInputStream()));            String str = null;            String[] strArray = null;            while ((str = in.readLine()) != null) {                int m = 0;                strArray = str.split(" ");                for (String tmp : strArray) {                    if (tmp.trim().length() == 0)                        continue;                    ++m;                    System.out.println("----tmp----" + tmp);                    if (tmp.indexOf("G") != -1) {                        if (m == 2) {                            System.out.println("---G----" + tmp);                            if (!tmp.equals("") && !tmp.equals("0"))                                totalhd += Double.parseDouble(tmp.substring(0,                                        tmp.length() - 1)) * 1024;                        }                        if (m == 3) {                            System.out.println("---G----" + tmp);                            if (!tmp.equals("none") && !tmp.equals("0"))                                usedhd += Double.parseDouble(tmp.substring(0,                                        tmp.length() - 1)) * 1024;                        }                    }                    if (tmp.indexOf("M") != -1) {                        if (m == 2) {                            System.out.println("---M---" + tmp);                            if (!tmp.equals("") && !tmp.equals("0"))                                totalhd += Double.parseDouble(tmp.substring(0,                                        tmp.length() - 1));                        }                        if (m == 3) {                            System.out.println("---M---" + tmp);                            if (!tmp.equals("none") && !tmp.equals("0"))                                usedhd += Double.parseDouble(tmp.substring(0,                                        tmp.length() - 1));                            System.out.println("----3----" + usedhd);                        }                    }                }            }        } catch (Exception e) {            e.printStackTrace();        } finally {            in.close();        }        // 上面写在userd和total写反了，懒得改了，就反着用了        System.out.println("----totalhd----" + usedhd);        System.out.println("----usedhd----" + totalhd);        renderText(String.valueOf((totalhd / usedhd) * 100));//        return str;    }}